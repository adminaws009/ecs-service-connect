AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation for deploying a sample application in ECS Fargate and enabling service to service communication using ECS Service connect.
Parameters:
  NamingPrefix:
    Type: String
    Description: The naming prefix for all resources.
    Default: app
  VPCIPv4CidrBlock:
    Description: VPC CIDR block for IPv4.
    Type: String
    Default: 10.0.0.0/16
  VPCSubnetIPv4Size:
    Description: Host bit mask length of each subnet, e.g. default of 8 will be a /24 subnet size.
    Type: Number
    Default: 8
  VPCNumberOfIPv4Subnets:
    Description: Number of equally sized IPv4 subnets that will be created within the VPC CIDR block.
    Type: Number
    Default: 256
  CountOfUiTasks:
    Description: The number of tasks to be instantiated for the UI service.
    Type: Number
    Default: 1
  CountOfAppserverTasks:
    Description: The number of tasks to be instantiated for the Application service.
    Type: Number
    Default: 1
  LaunchType:
    Description: Please provide the LaunchType
    Type: String
    Default: FARGATE
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCIPv4CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join
        - '-'
        - - !Ref NamingPrefix
          - vpc
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [1, {'Fn::Cidr': [!GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size]}]
      Tags:
      - Key: Name
        Value: !Sub '${NamingPrefix}-publicsubnet-a'
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [2, {'Fn::Cidr': [!GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size]}]
      Tags:
      - Key: Name
        Value: !Sub '${NamingPrefix}-publicsubnet-b'
      VpcId: !Ref VPC
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Join
        - '-'
        - - !Ref NamingPrefix
          - igw
  IGWAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join
        - '-'
        - - !Ref NamingPrefix
          - public
          - rtb
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet2
  # NAT1EIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  # NAT2EIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  # NATGW1:
  #   Type: AWS::EC2::NatGateway
  #   Properties: 
  #     AllocationId:
  #       Fn::GetAtt:
  #         - NAT1EIP
  #         - AllocationId
  #     SubnetId:
  #       Ref: PublicSubnet1
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${NamingPrefix}-ngw-a'
  # NATGW2:
  #   Type: AWS::EC2::NatGateway
  #   Properties: 
  #     AllocationId:
  #       Fn::GetAtt:
  #         - NAT2EIP
  #         - AllocationId
  #     SubnetId:
  #       Ref: PublicSubnet2
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${NamingPrefix}-ngw-b'
  # PrivateSubnet1:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     AvailabilityZone: !Select
  #       - 0
  #       - Fn::GetAZs: !Ref 'AWS::Region'
  #     CidrBlock: !Select [ 11, Fn::Cidr: [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${NamingPrefix}-privatesubnet-a'
  #     VpcId: !Ref VPC
  # PrivateSubnet2:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     AvailabilityZone: !Select
  #       - 1
  #       - Fn::GetAZs: !Ref 'AWS::Region'
  #     CidrBlock: !Select [ 12, Fn::Cidr: [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${NamingPrefix}-privatesubnet-b'
  #     VpcId: !Ref VPC
  # PrivateSubnet1Route:
  #   Type: 'AWS::EC2::Route'
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NATGW1
  #     RouteTableId: !Ref PrivateSubnet1RouteTable
  # PrivateSubnet1RouteTable:
  #   Type: 'AWS::EC2::RouteTable'
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Join
  #           - '-'
  #           - - !Ref NamingPrefix
  #             - private
  #             - rtb1
  # PrivateSubnet2Route:
  #   Type: 'AWS::EC2::Route'
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NATGW2
  #     RouteTableId: !Ref PrivateSubnet2RouteTable
  # PrivateSubnet2RouteTable:
  #   Type: 'AWS::EC2::RouteTable'
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Join
  #           - '-'
  #           - - !Ref NamingPrefix
  #             - private
  #             - rtb2
  # PrivateSubnetRouteTableAssociation1:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     RouteTableId: !Ref PrivateSubnet1RouteTable
  #     SubnetId: !Ref PrivateSubnet1
  # PrivateSubnetRouteTableAssociation2:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     RouteTableId: !Ref PrivateSubnet2RouteTable
  #     SubnetId: !Ref PrivateSubnet2
  AppUItaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      Family: app-ui-taskdefinition
      ContainerDefinitions:
      - Name: app-ui
        Essential: true
        Image: mreferre/yelb-ui:0.10
        PortMappings:
        - ContainerPort: 80
          AppProtocol: http
          Name: app-ui
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: sample-ecs-app
            awslogs-create-group: true
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "app-ui"
  AppServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      Family: appserver-taskdefinition
      ContainerDefinitions:
      - Name: app-server
        Essential: true
        Image: mreferre/yelb-appserver:0.7
        PortMappings:
        - ContainerPort: 4567
          AppProtocol: http
          Name: app-server
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: sample-ecs-app
            awslogs-create-group: true
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "app-server"
  RedisTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      Family: redis-taskdefinition
      ContainerDefinitions:
      - Name: redis-server
        Essential: true
        Image: redis:4.0.2
        PortMappings:
        - ContainerPort: 6379
          Name: redis-server
          Protocol: tcp
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: sample-ecs-app
            awslogs-create-group: true
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "redis-server"
  DBTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      Family: db-taskdefinition
      ContainerDefinitions:
      - Name: postgres-db
        Essential: true
        Image: mreferre/yelb-db:0.6
        PortMappings:
        - ContainerPort: 5432
          Name: postgres-db
          Protocol: tcp
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: sample-ecs-app
            awslogs-create-group: true
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "postgres-db"
  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Description: Namespace for the sample application.
      Name: !Sub '${NamingPrefix}.local'
  AppCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${NamingPrefix}-ui-cluster'
      ServiceConnectDefaults:
        Namespace: !GetAtt CloudMapNamespace.Arn
      CapacityProviders:
      - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
      - CapacityProvider: FARGATE_SPOT
        Weight: 1
  StorageCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${NamingPrefix}-storage-cluster'
      ServiceConnectDefaults:
        Namespace: !GetAtt CloudMapNamespace.Arn
      CapacityProviders:
      - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
      - CapacityProvider: FARGATE_SPOT
        Weight: 1
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: YelbTaskExecutionRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'ecr:GetAuthorizationToken'
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'
            - 'logs:CreateLogStream'
            - 'logs:CreateLogGroup'
            - 'logs:PutLogEvents'
            - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
            - 'elasticloadbalancing:Describe*'
            - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
            - 'elasticloadbalancing:DeregisterTargets'
            - 'elasticloadbalancing:DescribeTargetGroups'
            - 'elasticloadbalancing:DescribeTargetHealth'
            - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: application load balancer security group
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      VpcId: !Ref 'VPC'
  UISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ui security group
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ALBSecurityGroup
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      SecurityGroupEgress:
      - FromPort: 443
        IpProtocol: tcp
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      - FromPort: 4567
        IpProtocol: tcp
        ToPort: 4567
        DestinationSecurityGroupId: !Ref AppServerSecurityGroup
      VpcId: !Ref 'VPC'
  ALBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId: !Ref UISecurityGroup
      IpProtocol: tcp
      ToPort: 80
      FromPort: 80
      GroupId: !Ref ALBSecurityGroup
  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: appserver security group
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: tcp
        ToPort: 4567
        FromPort: 4567
      SecurityGroupEgress:
      - FromPort: 443
        IpProtocol: tcp
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  AppServerSecurityGroupDBEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432
      GroupId: !Ref AppServerSecurityGroup
  AppServerSecurityGroupRedisEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId: !Ref RedisServerSecurityGroup
      IpProtocol: tcp
      ToPort: 6379
      FromPort: 6379
      GroupId: !Ref AppServerSecurityGroup
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: db security group
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppServerSecurityGroup
        IpProtocol: tcp
        ToPort: 5432
        FromPort: 5432
      SecurityGroupEgress:
      - FromPort: 443
        IpProtocol: tcp
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  RedisServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: redis-server security group
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppServerSecurityGroup
        IpProtocol: tcp
        ToPort: 6379
        FromPort: 6379
      SecurityGroupEgress:
      - FromPort: 443
        IpProtocol: tcp
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']
      SecurityGroups: [!Ref ALBSecurityGroup]
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref UITargetGroup
  UITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
  DBService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: !Ref LaunchType
      Cluster: !Ref StorageCluster
      DesiredCount: 1
      TaskDefinition: !Ref 'DBTaskDefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']
          SecurityGroups: [!Ref 'DBSecurityGroup']
      ServiceConnectConfiguration:
        Enabled: true
        Services:
        - PortName: postgres-db
          DiscoveryName: yelb-db
          ClientAliases:
          - DnsName: yelb-db
            Port: 5432
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: true
            awslogs-group: sample-ecs-app
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "postgres-db-serviceconnect"
  RedisService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: !Ref LaunchType
      Cluster: !Ref StorageCluster
      DesiredCount: 1
      TaskDefinition: !Ref 'RedisTaskDefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']
          SecurityGroups: [!Ref 'RedisServerSecurityGroup']
      ServiceConnectConfiguration:
        Enabled: true
        Services:
        - PortName: redis-server
          DiscoveryName: redis-server
          ClientAliases:
          - DnsName: redis-server
            Port: 6379
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: true
            awslogs-group: sample-ecs-app
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "redis-serviceconnect"
  AppService:
    Type: AWS::ECS::Service
    DependsOn: ['RedisService', 'DBService']
    Properties:
      LaunchType: !Ref LaunchType
      Cluster: !Ref AppCluster
      DesiredCount: 1
      TaskDefinition: !Ref 'AppServerTaskDefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']
          SecurityGroups: [!Ref 'AppServerSecurityGroup']
      ServiceConnectConfiguration:
        Enabled: true
        Services:
        - PortName: app-server
          DiscoveryName: yelb-appserver
          ClientAliases:
          - DnsName: yelb-appserver
            Port: 4567
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: true
            awslogs-group: sample-ecs-app
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "app-serviceconnect"
  UIService:
    Type: AWS::ECS::Service
    DependsOn: ['LoadBalancerListener', 'AppService']
    Properties:
      LaunchType: !Ref LaunchType
      Cluster: !Ref AppCluster
      DesiredCount: 1
      TaskDefinition: !Ref 'AppUItaskDefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']
          SecurityGroups: [!Ref 'UISecurityGroup']
      LoadBalancers:
      - TargetGroupArn: !Ref UITargetGroup
        ContainerPort: 80
        ContainerName: 'app-ui'
      ServiceConnectConfiguration:
        Enabled: true
        Services:
        - PortName: app-ui
          DiscoveryName: yelb-ui
          ClientAliases:
          - DnsName: yelb-ui
            Port: 80
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: true
            awslogs-group: sample-ecs-app
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "ui-serviceconnect"
Outputs:
  LoadBalancerUrl:
    Description: The DNS name for the ALB
    Value: !GetAtt LoadBalancer.DNSName

