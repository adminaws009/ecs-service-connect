on:
  push:
    #branches:
      #- main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      STACK_NAME: ecs-service-connect
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: yelb-app-image
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
            echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
            echo "ECR_REGISTRY: $ECR_REGISTRY"
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
        

      - name: Build, tag, and push yelb-appserver image
        id: build-appserver-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:yelb-appserver-$IMAGE_TAG ./yelb-appserver
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:yelb-appserver-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:yelb-appserver-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push yelb-db image
        id: build-db-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:yelb-db-$IMAGE_TAG ./yelb-db
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:yelb-db-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:yelb-db-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push yelb-ui image
        id: build-ui-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:yelb-ui-$IMAGE_TAG ./yelb-ui
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:yelb-ui-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:yelb-ui-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check if CloudFormation stack exists
        run: |
          aws cloudformation describe-stacks --stack-name ${STACK_NAME} || true
          
      - name: Deploy or update CloudFormation stack
        run: |
          set -e
          if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
            echo "Stack already exists. Updating instead of creating..."
            if aws cloudformation update-stack \
              --stack-name ${STACK_NAME} \
              --template-body file://ecs-service-connect.yaml \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters \
                ParameterKey=AppServerImageUri,ParameterValue=${ECR_REGISTRY}/${ECR_REPOSITORY}:yelb-appserver-${IMAGE_TAG} \
                ParameterKey=DBImageUri,ParameterValue=${ECR_REGISTRY}/${ECR_REPOSITORY}:yelb-db-${IMAGE_TAG} \
                ParameterKey=UIImageUri,ParameterValue=${ECR_REGISTRY}/${ECR_REPOSITORY}:yelb-ui-${IMAGE_TAG} 2>&1 | grep -q "No updates are to be performed"; then
              echo "No updates are needed. Continuing workflow..."
            else
              aws cloudformation wait stack-update-complete --stack-name ${STACK_NAME}
            fi
          else
            echo "Creating new CloudFormation stack..."
            aws cloudformation create-stack \
              --stack-name ${STACK_NAME} \
              --template-body file://ecs-service-connect.yaml \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters \
                ParameterKey=AppServerImageUri,ParameterValue=${ECR_REGISTRY}/${ECR_REPOSITORY}:yelb-appserver-${IMAGE_TAG} \
                ParameterKey=DBImageUri,ParameterValue=${ECR_REGISTRY}/${ECR_REPOSITORY}:yelb-db-${IMAGE_TAG} \
                ParameterKey=UIImageUri,ParameterValue=${ECR_REGISTRY}/${ECR_REPOSITORY}:yelb-ui-${IMAGE_TAG}
            aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME}
          fi
          
      - name: Get CloudFormation stack outputs
        run: |
          aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs" --output json > stack-outputs.json

      - name: Display Load Balancer URL
        run: |
          LOAD_BALANCER_URL=$(jq -r '.[] | select(.OutputKey=="LoadBalancerUrl") | .OutputValue' stack-outputs.json)
          echo "Load Balancer URL: $LOAD_BALANCER_URL"


      #- name: Delete CloudFormation stack
        #run: |
          #aws cloudformation delete-stack --stack-name ${STACK_NAME}
          #aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME}

         
             